const mongoose = require('mongoose');
const Booking = require('../models/Booking');
const Room = require('../models/Room');
const User = require('../models/User');
require('dotenv').config();

const MONGODB_URI = process.env.MONGODB_URI;

if (!MONGODB_URI) {
  console.error('‚ùå MONGODB_URI non d√©finie dans les variables d\'environnement');
  process.exit(1);
}

async function testBooking() {
  try {
    await mongoose.connect(MONGODB_URI);
    console.log('‚úÖ Connect√© √† MongoDB');

    // R√©cup√©rer une chambre et un utilisateur pour le test
    const room = await Room.findOne({});
    const user = await User.findOne({});

    if (!room) {
      console.error('‚ùå Aucune chambre trouv√©e');
      return;
    }

    if (!user) {
      console.error('‚ùå Aucun utilisateur trouv√©');
      return;
    }

    console.log('üìã Test avec:');
    console.log('- Chambre:', room.name, '(ID:', room._id, ')');
    console.log('- Utilisateur:', user.fullName, '(ID:', user._id, ')');

    // Cr√©er une r√©servation de test
    const bookingData = {
      user: user._id,
      room: room._id,
      checkIn: new Date('2024-01-15'),
      checkOut: new Date('2024-01-17'),
      totalPrice: room.price * 2, // 2 nuits
      guests: {
        adults: 2,
        children: 0
      },
      specialRequests: 'Test de r√©servation'
    };

    console.log('üîÑ Cr√©ation de la r√©servation...');
    const booking = new Booking(bookingData);
    await booking.save();

    console.log('‚úÖ R√©servation cr√©√©e avec succ√®s!');
    console.log('üìä D√©tails de la r√©servation:');
    console.log('- ID:', booking._id);
    console.log('- Chambre:', room.name);
    console.log('- Utilisateur:', user.fullName);
    console.log('- Dates:', booking.checkIn.toDateString(), '√†', booking.checkOut.toDateString());
    console.log('- Prix total:', booking.totalPrice, 'FCFA');
    console.log('- Invit√©s:', booking.guests.adults, 'adultes,', booking.guests.children, 'enfants');
    console.log('- Statut:', booking.status);

    // V√©rifier que la chambre est maintenant indisponible
    const updatedRoom = await Room.findById(room._id);
    console.log('üè† Chambre disponible:', updatedRoom.isAvailable);

    // Supprimer la r√©servation de test
    console.log('üßπ Suppression de la r√©servation de test...');
    await Booking.findByIdAndDelete(booking._id);
    console.log('‚úÖ R√©servation de test supprim√©e');

  } catch (error) {
    console.error('‚ùå Erreur lors du test:', error);
  } finally {
    await mongoose.disconnect();
    console.log('üëã D√©connect√© de MongoDB');
  }
}

// Ex√©cuter le test
testBooking(); 